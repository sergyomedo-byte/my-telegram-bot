import os
import logging
import time
import json
import threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!", 200

def run_web_server():
    # Render —Å–∞–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    port = int(os.environ.get("PORT", 5000))
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä. –í–∞–∂–Ω–æ: host='0.0.0.0' - —Å–ª—É—à–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=port)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8091371448:AAF7eynXFflA4VO3lz7a1vHREN0tM81FOl4')
GROUP_ID = int(os.getenv('TELEGRAM_GROUP_ID', '-1002789329715'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TEXT, PHOTO_OR_DOC = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    categories = [
        ("–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "auto"),
        ("–ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ –ø–∏—Ç–±–∞–π–∫–∏", "moto"),
        ("–ò–≥—Ä—É—à–∫–∏", "toys"),
        ("–°—É–º–∫–∏", "bags"),
        ("–û–¥–µ–∂–¥–∞", "clothes"),
        ("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "sport"),
        ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "electronics"),
        ("–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "appliances"),
        ("–î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä", "decor"),
        ("–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "beauty"),
        ("–Æ–≤–µ–ª–∏—Ä–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "jewelry"),
        ("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "tools"),
        ("–û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "office"),
        ("–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", "kids"),
        ("–°—Ç–∞–Ω–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã", "machinery")
    ]
    buttons = [[InlineKeyboardButton(cat[0], callback_data=f"category_{cat[1]}")] for cat in categories]
    buttons.append([InlineKeyboardButton("–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="other_items")])
    buttons.append([InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")])
    buttons.append([InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")])
    buttons.append([InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏/–û—Ç–≥—Ä—É–∑–∫–∏", callback_data="news_feed")])
    return InlineKeyboardMarkup(buttons)

def get_cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
def load_news():
    try:
        with open('news.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_news(news):
    with open('news.json', 'w', encoding='utf-8') as f:
        json.dump(news, f, ensure_ascii=False, indent=4)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—É:",
            reply_markup=get_main_keyboard()
        )

async def send_to_group(context: ContextTypes.DEFAULT_TYPE, message: str, photo=None, document=None, username=None, request_id=None, category=None):
    logger.info(f"Sending to group {GROUP_ID}: {message}")
    try:
        full_message = f"–ó–∞–ø—Ä–æ—Å #{request_id} –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –æ—Ç @{username if username else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}:\n{message}"
        sent = await context.bot.send_message(chat_id=GROUP_ID, text=full_message)
        logger.info(f"Message sent successfully, message_id: {sent.message_id}")
        if photo:
            await context.bot.send_photo(chat_id=GROUP_ID, photo=photo[-1].file_id)
        if document:
            await context.bot.send_document(chat_id=GROUP_ID, document=document.file_id)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    logger.info(f"Received /start from chat_id: {chat_id}")
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–¢–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è' ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, –Ω–æ –º–æ–∂–µ–º –∑–∞–∫–∞–∑–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë: –æ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–æ —Å—Ç–∞–Ω–∫–æ–≤ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤. –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏, –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –∏ —É–¥–æ–±–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞. –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ ‚Äî –∏ –º—ã –Ω–∞–π–¥—ë–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n–ú—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏, –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º–∏. –í–∞—à–∏ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ '–ü–æ–º–æ—â—å'. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –≤–∞—à —Ç–æ–≤–∞—Ä —É–∂–µ –∂–¥–µ—Ç!",
        reply_markup=get_main_keyboard()
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"Button pressed: {data}")

    if data == "cancel":
        await cancel_request(update, context)
        return

    if data == "help":
        await query.edit_message_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['help_request'] = True
        return

    if data == "contacts":
        await query.edit_message_text(
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã: yuemo-logistics.ru, WhatsApp +86 153 2332 5277",
            reply_markup=get_main_keyboard()
        )
        return

    if data == "news_feed":
        news = load_news()
        if not news:
            message = "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!"
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
        else:
            await query.edit_message_text(
                "üîπ –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            for item in news:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"- {item['text']}"
                )
                if item['photo']:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=item['photo']
                    )
        return

    if data == "back_to_main":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_main_keyboard()
        )
        return

    if data.startswith("category_"):
        category = next((cat[0] for cat in [
            ("–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "auto"),
            ("–ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ –ø–∏—Ç–±–∞–π–∫–∏", "moto"),
            ("–ò–≥—Ä—É—à–∫–∏", "toys"),
            ("–°—É–º–∫–∏", "bags"),
            ("–û–¥–µ–∂–¥–∞", "clothes"),
            ("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "sport"),
            ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "electronics"),
            ("–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "appliances"),
            ("–î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä", "decor"),
            ("–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "beauty"),
            ("–Æ–≤–µ–ª–∏—Ä–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "jewelry"),
            ("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "tools"),
            ("–û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "office"),
            ("–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", "kids"),
            ("–°—Ç–∞–Ω–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã", "machinery")
        ] if cat[1] == data.replace("category_", "")), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        context.user_data['category'] = category
        if category == "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–∫–∞–∂–∏—Ç–µ VIN, –Ω–æ–º–µ—Ä –∫—É–∑–æ–≤–∞, –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥. –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫!\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
                reply_markup=get_cancel_keyboard()
            )
        else:
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–∫–æ–¥, –∞—Ä—Ç–∏–∫—É–ª) –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫!\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
                reply_markup=get_cancel_keyboard()
            )
        context.user_data['free_request'] = True
        return

    if data == "other_items":
        context.user_data['category'] = "–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã"
        await query.edit_message_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫!\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['free_request'] = True
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async def start_add_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
    )
    return TEXT

async def get_news_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['news_text'] = update.message.text
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip:"
    )
    return PHOTO_OR_DOC

async def get_news_photo_or_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id if update.message.photo else None
    document = update.message.document.file_id if update.message.document else None
    if update.message.text == "/skip" or (not photo and not document):
        photo = None
        document = None
    else:
        context.user_data['news_photo'] = photo
        context.user_data['news_document'] = document

    news = load_news()
    news.append({
        "text": context.user_data['news_text'],
        "photo": context.user_data.get('news_photo'),
        "document": context.user_data.get('news_document'),
        "timestamp": time.time()
    })
    save_news(news)
    await update.message.reply_text(
        f"‚úÖ –ù–æ–≤–æ—Å—Ç—å '{context.user_data['news_text']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª –ù–æ–≤–æ—Å—Ç–∏/–û—Ç–≥—Ä—É–∑–∫–∏."
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("add_news", start_add_news)],
    states={
        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_news_text)],
        PHOTO_OR_DOC: [
            MessageHandler(filters.PHOTO, get_news_photo_or_doc),
            MessageHandler(filters.Document.ALL, get_news_photo_or_doc),
            CommandHandler("skip", get_news_photo_or_doc)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    text = update.message.text or update.message.caption
    photo = update.message.photo
    document = update.message.document
    username = update.effective_user.username
    logger.info(f"Received message from @{username}: {text}")

    if text and text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_request(update, context)
        return

    if user_data.get('help_request'):
        if not text and not photo and not document:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                reply_markup=get_cancel_keyboard()
            )
            return
        message = f"–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç @{username}:\n{text}"
        try:
            await send_to_group(context, message, photo, document, username)
            await update.message.reply_text(
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Help request error: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        user_data.clear()
        return

    if user_data.get('free_request'):
        if not text and not photo and not document:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
                reply_markup=get_cancel_keyboard()
            )
            return
        request_id = int(time.time())
        category = user_data.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message = f"–°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{text}"
        try:
            await send_to_group(context, message, photo, document, username, request_id, category)
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º! –û–Ω –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Free request error: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        user_data.clear()
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(news_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_message))

    # –ó–∞–ø—É—Å–∫
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –≠—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ –∏ –Ω—É–∂–Ω–æ - —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
    run_web_server()

if __name__ == '__main__':
    main()