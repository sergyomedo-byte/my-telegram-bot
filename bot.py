import os
import logging
import time
import json
import threading
import http.server
import socketserver
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π HTTP server –¥–ª—è Render
class HealthHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Bot is alive!')
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    port = int(os.environ.get("PORT", 5000))
    with socketserver.TCPServer(("", port), HealthHandler) as httpd:
        logger.info(f"Health server running on port {port}")
        httpd.serve_forever()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TOKEN', '8091371448:AAERHwxB8CseSenyfCoHPuk-Y2BmNSo5kmU')
GROUP_ID = int(os.getenv('TELEGRAM_GROUP_ID', '-1002789329715'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TEXT, PHOTO_OR_DOC = range(2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("1. üõçÔ∏è –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞", callback_data="product_selection")],
        [InlineKeyboardButton("2. ‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("3. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("4. üì¢ –ù–æ–≤–æ—Å—Ç–∏/–û—Ç–≥—Ä—É–∑–∫–∏", callback_data="news_feed")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
def get_categories_keyboard():
    categories = [
        ("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "auto"),
        ("üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ –ø–∏—Ç–±–∞–π–∫–∏", "moto"),
        ("üß∏ –ò–≥—Ä—É—à–∫–∏", "toys"),
        ("üëú –°—É–º–∫–∏", "bags"),
        ("üëï –û–¥–µ–∂–¥–∞", "clothes"),
        ("‚öΩ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "sport"),
        ("üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "electronics"),
        ("üè† –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "appliances"),
        ("üè† –î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä", "decor"),
        ("üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "beauty"),
        ("üíç –Æ–≤–µ–ª–∏—Ä–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "jewelry"),
        ("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "tools"),
        ("üìä –û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "office"),
        ("üßí –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", "kids"),
        ("‚öôÔ∏è –°—Ç–∞–Ω–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã", "machinery"),
        ("üì¶ –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã", "other_items")
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    for i in range(0, len(categories), 2):
        row = []
        if i < len(categories):
            row.append(InlineKeyboardButton(categories[i][0], callback_data=f"category_{categories[i][1]}"))
        if i + 1 < len(categories):
            row.append(InlineKeyboardButton(categories[i+1][0], callback_data=f"category_{categories[i+1][1]}"))
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(buttons)

def get_cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
def get_news_path():
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'news.json')

def load_news():
    try:
        news_path = get_news_path()
        with open(news_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_news(news):
    news_path = get_news_path()
    with open(news_path, 'w', encoding='utf-8') as f:
        json.dump(news, f, ensure_ascii=False, indent=4)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=get_main_keyboard()
        )

async def send_to_group(context: ContextTypes.DEFAULT_TYPE, message: str, photo=None, document=None, username=None, request_id=None, category=None):
    logger.info(f"Sending to group {GROUP_ID}: {message}")
    try:
        full_message = f"–ó–∞–ø—Ä–æ—Å #{request_id} –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –æ—Ç @{username if username else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}:\n{message}"
        await context.bot.send_message(chat_id=GROUP_ID, text=full_message)
        if photo:
            await context.bot.send_photo(chat_id=GROUP_ID, photo=photo[-1].file_id)
        if document:
            await context.bot.send_document(chat_id=GROUP_ID, document=document.file_id)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    logger.info(f"Received /start from chat_id: {chat_id}")
    
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–¢–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è'! üõí\n\n"
        "–ú—ã –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏, "
        "–Ω–æ –º–æ–∂–µ–º –ø—Ä–∏–≤–µ–∑—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë: –æ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ —Å—Ç–∞–Ω–∫–æ–≤ –¥–æ –∏–≥—Ä—É—à–µ–∫.\n\n"
        "üöÄ –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏\n"
        "üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "üì¶ –£–¥–æ–±–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"Button pressed: {data}")

    if data == "cancel":
        await cancel_request(update, context)
        return

    if data == "back_to_main":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return

    if data == "product_selection":
        await query.edit_message_text(
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_categories_keyboard()
        )
        return

    if data == "help":
        await query.edit_message_text(
            "‚ùì –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['help_request'] = True
        return

    if data == "contacts":
        contacts_text = (
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "üåê –°–∞–π—Ç: yuemo-logistics.ru\n"
            "üì± WhatsApp: +86 153 2332 5277\n"
            "‚úâÔ∏è Email: info@yuemo-logistics.ru\n\n"
            "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7"
        )
        await query.edit_message_text(
            contacts_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return

    if data == "news_feed":
        news = load_news()
        if not news:
            await query.edit_message_text(
                "üì¢ –ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
        else:
            await query.edit_message_text(
                "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
            )
            for item in news:
                if item.get('text'):
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"üìÖ {item['text']}"
                    )
                if item.get('photo'):
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=item['photo']
                    )
        return

    if data.startswith("category_"):
        category_map = {
            "auto": "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
            "moto": "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ –ø–∏—Ç–±–∞–π–∫–∏",
            "toys": "üß∏ –ò–≥—Ä—É—à–∫–∏",
            "bags": "üëú –°—É–º–∫–∏",
            "clothes": "üëï –û–¥–µ–∂–¥–∞",
            "sport": "‚öΩ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "electronics": "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "appliances": "üè† –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
            "decor": "üè† –î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä",
            "beauty": "üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "jewelry": "üíç –Æ–≤–µ–ª–∏—Ä–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
            "tools": "üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "office": "üìä –û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
            "kids": "üßí –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
            "machinery": "‚öôÔ∏è –°—Ç–∞–Ω–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã",
            "other_items": "üì¶ –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã"
        }
        
        category_key = data.replace("category_", "")
        category = category_map.get(category_key, "üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        context.user_data['category'] = category
        
        if category == "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã":
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category}\n\n"
                "üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
                "‚Ä¢ VIN –Ω–æ–º–µ—Ä\n"
                "‚Ä¢ –ù–æ–º–µ—Ä –∫—É–∑–æ–≤–∞\n" 
                "‚Ä¢ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å\n"
                "‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n"
                "‚Ä¢ –ö–æ–¥ –∑–∞–ø—á–∞—Å—Ç–∏\n\n"
                "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ:",
                reply_markup=get_cancel_keyboard()
            )
        else:
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category}\n\n"
                "üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
                "‚Ä¢ –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞\n"
                "‚Ä¢ –í–∏–¥–µ–æ –æ–±–∑–æ—Ä\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
                "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ:",
                reply_markup=get_cancel_keyboard()
            )
        context.user_data['free_request'] = True
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async def start_add_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
    )
    return TEXT

async def get_news_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['news_text'] = update.message.text
    await update.message.reply_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip:"
    )
    return PHOTO_OR_DOC

async def get_news_photo_or_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text and update.message.text.lower() == "/skip":
        photo = None
        document = None
    else:
        photo = update.message.photo[-1].file_id if update.message.photo else None
        document = update.message.document.file_id if update.message.document else None

    news = load_news()
    news.append({
        "text": context.user_data['news_text'],
        "photo": photo,
        "document": document,
        "timestamp": time.time()
    })
    save_news(news)
    await update.message.reply_text(
        "‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª –ù–æ–≤–æ—Å—Ç–∏/–û—Ç–≥—Ä—É–∑–∫–∏.",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_request(update, context)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("add_news", start_add_news)],
    states={
        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_news_text)],
        PHOTO_OR_DOC: [
            MessageHandler(filters.PHOTO, get_news_photo_or_doc),
            MessageHandler(filters.Document.ALL, get_news_photo_or_doc),
            CommandHandler("skip", get_news_photo_or_doc)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel_news)]
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    text = update.message.text or update.message.caption
    photo = update.message.photo
    document = update.message.document
    username = update.effective_user.username
    logger.info(f"Received message from @{username}: {text}")

    if text and text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_request(update, context)
        return

    if user_data.get('help_request'):
        if not text and not photo and not document:
            await update.message.reply_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                reply_markup=get_cancel_keyboard()
            )
            return
        message = f"–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç @{username}:\n{text}"
        try:
            await send_to_group(context, message, photo, document, username)
            await update.message.reply_text(
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Help request error: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        user_data.clear()
        return

    if user_data.get('free_request'):
        if not text and not photo and not document:
            await update.message.reply_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
                reply_markup=get_cancel_keyboard()
            )
            return
        request_id = int(time.time())
        category = user_data.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message = f"–ó–∞–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –æ—Ç @{username}:\n{text}"
        try:
            await send_to_group(context, message, photo, document, username, request_id, category)
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º!\n\n"
                "‚ö° –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Free request error: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        user_data.clear()
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    logger.info("Starting Telegram bot...")
    
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(news_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_message))

    # –ó–∞–ø—É—Å–∫
    logger.info("Bot starting polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

def main():
    logger.info("Application starting...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()

if __name__ == '__main__':
    main()